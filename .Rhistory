demo()
install.packages("caret")
q()
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("ggplot2")
swirl()
head(pollution)
dim(pollution,1)
dim(pollution)
summary(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
table(pollution$region)
reg=table(pollution$region)
reg<-table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Countries in Each Region")
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(ppm ~ region,data="pollution",col="red")
boxplot(ppm ~ region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east=subset(pollution,pollution$region=="east")
east<-subset(pollution,pollution$region=="east")
east<-subset(pollution,region=="east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm,col=pollution$region))
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
west=subset(pollution,region=="west")
west<-subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
swirl()
library(swirl)
swirl()\
swirl()
?Devices
with(faithful,plot(eruptions,waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title("Old Faithful Geyser data")
dev.copy(png,file="geyserplot.png")
dev.off()
bye()
q()
library(swirl)
swirl()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
tabel(mpg$model)
table(mpg$model)
qplot(displ,hwy,data=mpg)
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,data=airquality)
boxplot(Ozone~Month,data=airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title("Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title("Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
?pch()
par("Pc)
par("pch")
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
may=subset(airquality,month=5)
may=subset(airquality,month==5)
may=subset(airquality,Month==5)
may<-subset(airquality,Month==5)
points(may$Wind,May$Ozone,pch=17,color="blue")
points(may$Wind,may$Ozone,pch=17,color="blue")
points(may$Wind,may$Ozone,pch=17,col="blue")
notmay<-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,pch=11,col="red")
points(notmay$Wind,notmay$Ozone,pch=8,col="red")
legend("topright",c(17,8),c("blue","red",c("May","Other months"))
)
legend("topright",c(17,8),c("blue","red"),c("May","Other months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,title="Ozone and Wind")
plot(airquality$Wind,airquality$Ozone,main ="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main ="Ozone and Solar Radiation")
par(mfrow=c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))
plot(airquality$Wind,airquality$Ozone,main ="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main ="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and wather in New York City",outer = TRUE)
mtext("Ozone and weather in New York City",outer = TRUE)
mtext("Ozone and Weather in New York City",outer = TRUE)
q()
library(swirl)
swirl()
dim(p0)
dim(pm0)
head(pm0)
cnames
cnames<-strsplit(cnames,"|",fixed=TRUE)
cnames
names(pm0)<-make.names(cnames[[1]][wcol])
head(pm0)
x0<-pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x1=pm1$Sample.Value
x1<-pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative<-(x1<0)
negative<- x1<0
sum(negative,na.rm = TRUE)
mean(negative,na.rm = TRUE)
dates<-pm1$Date
str(dates)
dates<-as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
both<-intersect(site0,site1)
both
head(pm0)
cnt0<-subset(pm0,State.Code==36 & county.side %in% both)
cnt0<-subset(pm0,State.(Code==36) & (county.side %in% both)
)
cnt0<-subset(pm0,(State.Code==36) & (county.side %in% both))
cnt0<-subset(pm0,State.Code==36 & county.site %in% both)
cnt1<-subset(pm1,State.Code==36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub<-subset(cnt0,County.Code==63 & Site.ID==2008)
pm1sub<-subset(cnt1,County.Code==63 & Site.ID==2008)
x0sub=pm0sub$Sample.Value
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
dates0<-as.date(pm0sub$Date,"%Y%m%d")
dates0<-as.Date(pm0sub$Date,"%Y%m%d")
dates0<-as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2))
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(h=median(x0sub,na.rm=TRUE),lwd=2)
plot(dates1,x1sub,pch=20)
abline(h=median(x1sub,na.rm=TRUE),lwd=2)
rng<-range(x0sub,x1sub,na.rm=TRUE)
rng
mn0<-with(pm0,tapply(Sample.Value,Sample.Code,mean,na.rm=TRUE))
mn0<-with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1<-with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.frame(state=names(mn0),mean=mn0)
d1<-data.frame(state=names(mn1),mean=mn1)
mrg<-merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg,points(rep(2,52),mrg[,3]))
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
library(xgboost)
?require
data("agaricus.train", package = 'xgboost')
data("agaricus.test", package =  'xgboost')
train <- agaricus.train
test <- agaricus.test
str(train)
dim(train$data)
dim(test$data)
class(train$data[1])
class(train$data)[1]
class(train$label)
class(train$data)
bstSpars <- xgboost(data = train$data, label = train$label, max.depth = 2, eta = 1, nthread = 2, nrounds = =2)
bstSpars <- xgboost(data = train$data, label = train$label, max.depth = 2, eta = 1, nthread = 2, nrounds = 2)
bstSpars <- xgboost(data = train$data, label = train$label, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
dtrain <- xgb.DMatrix(data = train$data, label=train$label)
bstDmatrix <- xgboost(data = dtrain, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic")
bstDmatrix <- xgboost(data = dtrain, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic", verbose = 2)
pred <- predict(bstDmatrix, test$data)
head(pred)
prediction <- as.numeric(pred > 0.5)
head(prediction)
err <- mean(prediction != test$label)
setwd("D:/Kaggle/SanFranciscoCrimeClassification/scripts")
library(xgboost)
data("agaricus.train", package = 'xgboost')
data("agaricus.test", package =  'xgboost')
train <- agaricus.train
test <- agaricus.test
dtrain <- xgb.DMatrix(data=train$data,label=train$label)
dtest <- xgb.DMatrix(data=test$label,label=test$label)
watchlist <- list(train=dtrain, test=dtest)
dtest <- xgb.DMatrix(data=test$label,label=test$label)
dtest <- xgb.DMatrix(data=test$train,label=test$label)
test <- agaricus.test
dtest <- xgb.DMatrix(data=test$train,label=test$label)
dtest <- xgb.DMatrix(data=test$data,label=test$label)
watchlist <- list(train=dtrain, test=dtest)
bst <- xgb.train(data=dtrain, max.depth=2, eta=1, nthread=2, nround=2, watchlist = watchlist, objective="binary:logistic")
bst <- xgb.train(data=dtrain, max.depth=2, eta=1, nthread=2, nround=2, watchlist = watchlist,
eval.metric="error", eval.metric="logloss",
objective="binary:logistic")
bst <- xgb.train(data=dtrain, booster="gblinear", max.depth=2, nthread=2, nround=2, watchlist = watchlist,
eval.metric="error", eval.metric="logloss",
objective="binary:logistic")
importance_matrix <- xgb.importance(model = bst)
importance_matrix <- xgb.importance(model = bst)
bstTree <- xgb.train(data=dtrain, max.depth=2, eta=1, nthread=2, nround=2, watchlist = watchlist,
eval.metric="error", eval.metric="logloss",
objective="binary:logistic")
bstLin <- xgb.train(data=dtrain, booster="gblinear", max.depth=2, nthread=2, nround=2, watchlist = watchlist,
eval.metric="error", eval.metric="logloss",
objective="binary:logistic")
importance_matrix <- xgb.importance(model = bstTree)
print(importance_matrix)
xgb.plot.importance(importance_matrix = importance_matrix)
require(Ckmeans.1p.dp)
require("Ckmeans.1p.dp")
library(ggplot2)
xgb.plot.importance(importance_matrix = importance_matrix)
install.packages("Ckmeans.1d.dp")
library(Ckmeans.1d.dp)
xgb.plot.importance(importance_matrix = importance_matrix)
print(importance_matrix)
plot(colnames(train)[importance_matrix$Feature],importance_matrix$Gain)
colnames(train)[importance_matrix$Feature]
colnames(train)
colnames(dtrain$data)
colnames(train$data)
plot(colnames(train$data)[importance_matrix$Feature],importance_matrix$Gain)
colnames(train$data)[importance_matrix$Feature]
colnames(train$data)
importance_matrix$Feature
colnames(train$data)[s.numric(importance_matrix$Feature)]
train$data)[as.numric(importance_matrix$Feature)]
colnames(train$data)[as.numric(importance_matrix$Feature)]
colnames(train$data)[as.numeric(importance_matrix$Feature)]
plot(colnames(train$data)[as.numeric(importance_matrix$Feature)],importance_matrix$Gain)
boxplot(colnames(train$data)[as.numeric(importance_matrix$Feature)],importance_matrix$Gain)
print(colnames(train$data)[as.numeric(importance_matrix$Feature)],importance_matrix$Gain)
print(colnames(train$data)[as.numeric(importance_matrix$Feature)])
library(Ckmeans.1d.dp)
xgb.plot.importance(importance_matrix = importance_matrix)
xgb.plot.tree(model=bstTree)
library(DiagrammeR)
install.packages("DiagrammeR")
library(DiagrammeR)
xgb.plot.tree(model=bstTree)
xgb.plot.tree(model=bstTree)
